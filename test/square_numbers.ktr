# simulating head and tail (as if sets were lists) ...
let head => y subset of Universe: any
let tail => y subset of Universe: y - (head . y)

let True  = 1 = 1
let False = ~True

# ∀xP(x)
let forall => P in Universe, X subset of Universe, x in X:
           [  True                                              X = {}  ]
           [  True          P . x, forall . (P, X - x, head . (X - x))  ]
           [  False                                          otherwise  ]

# ∃xP(x)
let exists => P in Universe, X subset of Universe, x in X:
           [  False                                        X = {}  ]
           [  True                                         P . x   ]
           [  exists . (P, X - x, head . (X - x))       otherwise  ]

let
  square => x in Z: x ^ 2
  pred => x in Z: (x % 2) = 0
  allEven => s subset of Z: forall . (pred, s, s - (head . s))
  pred2 => x in Z: x > 10
  ifThereIsANumberGreaterThan10 => s subset of Z: exists . (pred2, s, s - (head . s))
do
  square .
  allEven .
  ifThereIsANumberGreaterThan10 .
  {2, 4, 6, 8, 10, 12}
