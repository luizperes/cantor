# Main

let N = 1..127
let Z = N + -128..0

let head => y subset of Universe: any in y
let tail => y subset of Universe: y - (head . y)

let True  = 1 = 1
let False = ~True

# Functions

let map => f ∈ Universe → Universe, s ⊆ Universe, x ∈ s, acc ⊆ Universe:
        [  acc                                                  s = {}  ]
        [  map . (f, s - x, head . (s - x), (f∘x) + acc)     otherwise  ]

let square => x ∈ Z: x^2

# Basic Definitions

let True = 1 = 1
let False = ~True

# Function Example

let isBool => expr ∈ Universe:
           [  True       expr ]
           [  False otherwise ]

let isNatural => x ∈ Universe:
              [ True               (x ∈ N) ]
              [ True       (x ∈ Z), x >= 0 ]
              [ False            otherwise ]

let isSubsetOfN => x subset of Universe:
                [ True            (x subset of N)  ]
                [ False                 otherwise  ]

# Set Operations

let set1 = {1, 2, 3}
let set2 = {2, 3, 4}
let set3 => s ⊆ set1 ∪ set2: s
let set4 => s ⊆ set1 \ set2: s
let set5 => s ⊆ set1 × set2: s
let set7 => s ⊆ set1 → set2: s
let set8 => s ⊆ set1 ∩ set2 union set3: s

# Composition

let Point => (x, y) ∈ Z × Z: (x, y)

let addOneToPositionX => (x, y) ∈ Point: (x+1, y)

let anotherTry => x ∈ Point: x

let yetAnotherTry => (x, y) ∈ Point: (x, y)

let yetYetAnotherTry => (x, y, z) ∈ Point × G: (x, y, z)

let yetYetAnotherTry => (x, y, z) ∈ Point × Z: (x, y, z)

do map ∘ (square, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1, {})

do isNatural . 4

do isSubsetOfN . {1, 2, 3}

do isSubsetOfN . {0, 1, 2}
